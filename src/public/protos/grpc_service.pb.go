// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: apis.proto

package grpc_service

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The log in request message containing username and password.
type LogInRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=Username,proto3" json:"Username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
}

func (x *LogInRequest) Reset() {
	*x = LogInRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogInRequest) ProtoMessage() {}

func (x *LogInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogInRequest.ProtoReflect.Descriptor instead.
func (*LogInRequest) Descriptor() ([]byte, []int) {
	return file_grpc_service_proto_rawDescGZIP(), []int{0}
}

func (x *LogInRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LogInRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// The log in request message containing .
type LogInCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *LogInCacheRequest) Reset() {
	*x = LogInCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogInCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogInCacheRequest) ProtoMessage() {}

func (x *LogInCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogInCacheRequest.ProtoReflect.Descriptor instead.
func (*LogInCacheRequest) Descriptor() ([]byte, []int) {
	return file_grpc_service_proto_rawDescGZIP(), []int{1}
}

func (x *LogInCacheRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// The modify nickname request message containing user's id and modified nickname.
type ModifyNickNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64  `protobuf:"varint,1,opt,name=User_id,json=UserId,proto3" json:"User_id,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
}

func (x *ModifyNickNameRequest) Reset() {
	*x = ModifyNickNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyNickNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyNickNameRequest) ProtoMessage() {}

func (x *ModifyNickNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyNickNameRequest.ProtoReflect.Descriptor instead.
func (*ModifyNickNameRequest) Descriptor() ([]byte, []int) {
	return file_grpc_service_proto_rawDescGZIP(), []int{2}
}

func (x *ModifyNickNameRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ModifyNickNameRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

// The upload profile picture request message containing user's id and profile picture.
type UploadProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int64  `protobuf:"varint,1,opt,name=User_id,json=UserId,proto3" json:"User_id,omitempty"`
	ProfilePicture string `protobuf:"bytes,2,opt,name=Profile_picture,json=ProfilePicture,proto3" json:"Profile_picture,omitempty"`
}

func (x *UploadProfileRequest) Reset() {
	*x = UploadProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadProfileRequest) ProtoMessage() {}

func (x *UploadProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadProfileRequest.ProtoReflect.Descriptor instead.
func (*UploadProfileRequest) Descriptor() ([]byte, []int) {
	return file_grpc_service_proto_rawDescGZIP(), []int{3}
}

func (x *UploadProfileRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UploadProfileRequest) GetProfilePicture() string {
	if x != nil {
		return x.ProfilePicture
	}
	return ""
}

// request for putting data into mysql
type MysqlToCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token          string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	UserId         int64  `protobuf:"varint,2,opt,name=User_id,json=UserId,proto3" json:"User_id,omitempty"`
	Username       string `protobuf:"bytes,3,opt,name=Username,proto3" json:"Username,omitempty"`
	Password       string `protobuf:"bytes,4,opt,name=Password,proto3" json:"Password,omitempty"`
	Nickname       string `protobuf:"bytes,5,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	ProfilePicture string `protobuf:"bytes,6,opt,name=Profile_picture,json=ProfilePicture,proto3" json:"Profile_picture,omitempty"`
}

func (x *MysqlToCacheRequest) Reset() {
	*x = MysqlToCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MysqlToCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlToCacheRequest) ProtoMessage() {}

func (x *MysqlToCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlToCacheRequest.ProtoReflect.Descriptor instead.
func (*MysqlToCacheRequest) Descriptor() ([]byte, []int) {
	return file_grpc_service_proto_rawDescGZIP(), []int{4}
}

func (x *MysqlToCacheRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *MysqlToCacheRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MysqlToCacheRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *MysqlToCacheRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *MysqlToCacheRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *MysqlToCacheRequest) GetProfilePicture() string {
	if x != nil {
		return x.ProfilePicture
	}
	return ""
}

// request message used for modifying nickname in cache
type ModifyNickNameCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
}

func (x *ModifyNickNameCacheRequest) Reset() {
	*x = ModifyNickNameCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyNickNameCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyNickNameCacheRequest) ProtoMessage() {}

func (x *ModifyNickNameCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyNickNameCacheRequest.ProtoReflect.Descriptor instead.
func (*ModifyNickNameCacheRequest) Descriptor() ([]byte, []int) {
	return file_grpc_service_proto_rawDescGZIP(), []int{5}
}

func (x *ModifyNickNameCacheRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ModifyNickNameCacheRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

// request message used for uploading profile picture in cache
type UploadProfileCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token          string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	ProfilePicture string `protobuf:"bytes,2,opt,name=profile_picture,json=profilePicture,proto3" json:"profile_picture,omitempty"`
}

func (x *UploadProfileCacheRequest) Reset() {
	*x = UploadProfileCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadProfileCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadProfileCacheRequest) ProtoMessage() {}

func (x *UploadProfileCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadProfileCacheRequest.ProtoReflect.Descriptor instead.
func (*UploadProfileCacheRequest) Descriptor() ([]byte, []int) {
	return file_grpc_service_proto_rawDescGZIP(), []int{6}
}

func (x *UploadProfileCacheRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UploadProfileCacheRequest) GetProfilePicture() string {
	if x != nil {
		return x.ProfilePicture
	}
	return ""
}

// The response message containing the info of a user.
type LogInReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int64  `protobuf:"varint,1,opt,name=User_id,json=UserId,proto3" json:"User_id,omitempty"`
	Username       string `protobuf:"bytes,2,opt,name=Username,proto3" json:"Username,omitempty"`
	Password       string `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
	Nickname       string `protobuf:"bytes,4,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	ProfilePicture string `protobuf:"bytes,5,opt,name=Profile_picture,json=ProfilePicture,proto3" json:"Profile_picture,omitempty"`
}

func (x *LogInReply) Reset() {
	*x = LogInReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogInReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogInReply) ProtoMessage() {}

func (x *LogInReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogInReply.ProtoReflect.Descriptor instead.
func (*LogInReply) Descriptor() ([]byte, []int) {
	return file_grpc_service_proto_rawDescGZIP(), []int{7}
}

func (x *LogInReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LogInReply) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LogInReply) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *LogInReply) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *LogInReply) GetProfilePicture() string {
	if x != nil {
		return x.ProfilePicture
	}
	return ""
}

// The response message containing the info of user's operation.
type UsrOpReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UsrOpReply) Reset() {
	*x = UsrOpReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsrOpReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsrOpReply) ProtoMessage() {}

func (x *UsrOpReply) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsrOpReply.ProtoReflect.Descriptor instead.
func (*UsrOpReply) Descriptor() ([]byte, []int) {
	return file_grpc_service_proto_rawDescGZIP(), []int{8}
}

func (x *UsrOpReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_grpc_service_proto protoreflect.FileDescriptor

var file_grpc_service_proto_rawDesc = []byte{
	0x0a, 0x12, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x22, 0x46, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x29, 0x0a, 0x11, 0x4c, 0x6f,
	0x67, 0x49, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4c, 0x0a, 0x15, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x58, 0x0a, 0x14, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x55,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x22, 0xc1, 0x01,
	0x0a, 0x13, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x54, 0x6f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x55,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x22, 0x4e, 0x0a, 0x1a, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4e, 0x69, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x5a, 0x0a, 0x19, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x22, 0xa2, 0x01,
	0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x0a, 0x07,
	0x55, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x22, 0x26, 0x0a, 0x0a, 0x55, 0x73, 0x72, 0x4f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xc4, 0x04, 0x0a, 0x0b, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x4c, 0x6f,
	0x67, 0x49, 0x6e, 0x12, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c,
	0x6f, 0x67, 0x49, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0a, 0x4c,
	0x6f, 0x67, 0x49, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4e, 0x69,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x72,
	0x4f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x13, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x12, 0x28, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x72, 0x4f, 0x70, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x72, 0x4f, 0x70,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x27, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x72, 0x4f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x54, 0x6f, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x54, 0x6f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x72, 0x4f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grpc_service_proto_rawDescOnce sync.Once
	file_grpc_service_proto_rawDescData = file_grpc_service_proto_rawDesc
)

func file_grpc_service_proto_rawDescGZIP() []byte {
	file_grpc_service_proto_rawDescOnce.Do(func() {
		file_grpc_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_service_proto_rawDescData)
	})
	return file_grpc_service_proto_rawDescData
}

var file_grpc_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_grpc_service_proto_goTypes = []interface{}{
	(*LogInRequest)(nil),               // 0: apis.LogInRequest
	(*LogInCacheRequest)(nil),          // 1: apis.LogInCacheRequest
	(*ModifyNickNameRequest)(nil),      // 2: apis.ModifyNickNameRequest
	(*UploadProfileRequest)(nil),       // 3: apis.UploadProfileRequest
	(*MysqlToCacheRequest)(nil),        // 4: apis.MysqlToCacheRequest
	(*ModifyNickNameCacheRequest)(nil), // 5: apis.ModifyNickNameCacheRequest
	(*UploadProfileCacheRequest)(nil),  // 6: apis.UploadProfileCacheRequest
	(*LogInReply)(nil),                 // 7: apis.LogInReply
	(*UsrOpReply)(nil),                 // 8: apis.UsrOpReply
}
var file_grpc_service_proto_depIdxs = []int32{
	0, // 0: apis.UserService.LogIn:input_type -> apis.LogInRequest
	1, // 1: apis.UserService.LogInCache:input_type -> apis.LogInCacheRequest
	2, // 2: apis.UserService.ModifyNickName:input_type -> apis.ModifyNickNameRequest
	5, // 3: apis.UserService.ModifyNickNameCache:input_type -> apis.ModifyNickNameCacheRequest
	3, // 4: apis.UserService.UploadProfile:input_type -> apis.UploadProfileRequest
	6, // 5: apis.UserService.UploadProfileCache:input_type -> apis.UploadProfileCacheRequest
	4, // 6: apis.UserService.MysqlToCache:input_type -> apis.MysqlToCacheRequest
	7, // 7: apis.UserService.LogIn:output_type -> apis.LogInReply
	7, // 8: apis.UserService.LogInCache:output_type -> apis.LogInReply
	8, // 9: apis.UserService.ModifyNickName:output_type -> apis.UsrOpReply
	8, // 10: apis.UserService.ModifyNickNameCache:output_type -> apis.UsrOpReply
	8, // 11: apis.UserService.UploadProfile:output_type -> apis.UsrOpReply
	8, // 12: apis.UserService.UploadProfileCache:output_type -> apis.UsrOpReply
	8, // 13: apis.UserService.MysqlToCache:output_type -> apis.UsrOpReply
	7, // [7:14] is the sub-list for method output_type
	0, // [0:7] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_grpc_service_proto_init() }
func file_grpc_service_proto_init() {
	if File_grpc_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_grpc_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogInRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogInCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyNickNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MysqlToCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyNickNameCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadProfileCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogInReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsrOpReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grpc_service_proto_goTypes,
		DependencyIndexes: file_grpc_service_proto_depIdxs,
		MessageInfos:      file_grpc_service_proto_msgTypes,
	}.Build()
	File_grpc_service_proto = out.File
	file_grpc_service_proto_rawDesc = nil
	file_grpc_service_proto_goTypes = nil
	file_grpc_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserServiceClient is the client API for UserService apis.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	//grpc for log in from mysql api
	LogIn(ctx context.Context, in *LogInRequest, opts ...grpc.CallOption) (*LogInReply, error)
	//grpc for log in from cache redis api
	LogInCache(ctx context.Context, in *LogInCacheRequest, opts ...grpc.CallOption) (*LogInReply, error)
	//grpc for nickname modification from mysql api
	ModifyNickName(ctx context.Context, in *ModifyNickNameRequest, opts ...grpc.CallOption) (*UsrOpReply, error)
	//grpc for nickname modification from cache redis api
	ModifyNickNameCache(ctx context.Context, in *ModifyNickNameCacheRequest, opts ...grpc.CallOption) (*UsrOpReply, error)
	//grpc for profile picture upload from mysql api
	UploadProfile(ctx context.Context, in *UploadProfileRequest, opts ...grpc.CallOption) (*UsrOpReply, error)
	//grpc for profile picture upload from cache redis api
	UploadProfileCache(ctx context.Context, in *UploadProfileCacheRequest, opts ...grpc.CallOption) (*UsrOpReply, error)
	//grpc write mysql to redis
	MysqlToCache(ctx context.Context, in *MysqlToCacheRequest, opts ...grpc.CallOption) (*UsrOpReply, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) LogIn(ctx context.Context, in *LogInRequest, opts ...grpc.CallOption) (*LogInReply, error) {
	out := new(LogInReply)
	err := c.cc.Invoke(ctx, "/apis.UserService/LogIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) LogInCache(ctx context.Context, in *LogInCacheRequest, opts ...grpc.CallOption) (*LogInReply, error) {
	out := new(LogInReply)
	err := c.cc.Invoke(ctx, "/apis.UserService/LogInCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ModifyNickName(ctx context.Context, in *ModifyNickNameRequest, opts ...grpc.CallOption) (*UsrOpReply, error) {
	out := new(UsrOpReply)
	err := c.cc.Invoke(ctx, "/apis.UserService/ModifyNickName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ModifyNickNameCache(ctx context.Context, in *ModifyNickNameCacheRequest, opts ...grpc.CallOption) (*UsrOpReply, error) {
	out := new(UsrOpReply)
	err := c.cc.Invoke(ctx, "/apis.UserService/ModifyNickNameCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UploadProfile(ctx context.Context, in *UploadProfileRequest, opts ...grpc.CallOption) (*UsrOpReply, error) {
	out := new(UsrOpReply)
	err := c.cc.Invoke(ctx, "/apis.UserService/UploadProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UploadProfileCache(ctx context.Context, in *UploadProfileCacheRequest, opts ...grpc.CallOption) (*UsrOpReply, error) {
	out := new(UsrOpReply)
	err := c.cc.Invoke(ctx, "/apis.UserService/UploadProfileCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) MysqlToCache(ctx context.Context, in *MysqlToCacheRequest, opts ...grpc.CallOption) (*UsrOpReply, error) {
	out := new(UsrOpReply)
	err := c.cc.Invoke(ctx, "/apis.UserService/MysqlToCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService apis.
type UserServiceServer interface {
	//grpc for log in from mysql api
	LogIn(context.Context, *LogInRequest) (*LogInReply, error)
	//grpc for log in from cache redis api
	LogInCache(context.Context, *LogInCacheRequest) (*LogInReply, error)
	//grpc for nickname modification from mysql api
	ModifyNickName(context.Context, *ModifyNickNameRequest) (*UsrOpReply, error)
	//grpc for nickname modification from cache redis api
	ModifyNickNameCache(context.Context, *ModifyNickNameCacheRequest) (*UsrOpReply, error)
	//grpc for profile picture upload from mysql api
	UploadProfile(context.Context, *UploadProfileRequest) (*UsrOpReply, error)
	//grpc for profile picture upload from cache redis api
	UploadProfileCache(context.Context, *UploadProfileCacheRequest) (*UsrOpReply, error)
	//grpc write mysql to redis
	MysqlToCache(context.Context, *MysqlToCacheRequest) (*UsrOpReply, error)
}

// UnimplementedUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (*UnimplementedUserServiceServer) LogIn(context.Context, *LogInRequest) (*LogInReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogIn not implemented")
}
func (*UnimplementedUserServiceServer) LogInCache(context.Context, *LogInCacheRequest) (*LogInReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogInCache not implemented")
}
func (*UnimplementedUserServiceServer) ModifyNickName(context.Context, *ModifyNickNameRequest) (*UsrOpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyNickName not implemented")
}
func (*UnimplementedUserServiceServer) ModifyNickNameCache(context.Context, *ModifyNickNameCacheRequest) (*UsrOpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyNickNameCache not implemented")
}
func (*UnimplementedUserServiceServer) UploadProfile(context.Context, *UploadProfileRequest) (*UsrOpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadProfile not implemented")
}
func (*UnimplementedUserServiceServer) UploadProfileCache(context.Context, *UploadProfileCacheRequest) (*UsrOpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadProfileCache not implemented")
}
func (*UnimplementedUserServiceServer) MysqlToCache(context.Context, *MysqlToCacheRequest) (*UsrOpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MysqlToCache not implemented")
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_LogIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LogIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.UserService/LogIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LogIn(ctx, req.(*LogInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_LogInCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogInCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LogInCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.UserService/LogInCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LogInCache(ctx, req.(*LogInCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ModifyNickName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyNickNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ModifyNickName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.UserService/ModifyNickName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ModifyNickName(ctx, req.(*ModifyNickNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ModifyNickNameCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyNickNameCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ModifyNickNameCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.UserService/ModifyNickNameCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ModifyNickNameCache(ctx, req.(*ModifyNickNameCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UploadProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UploadProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.UserService/UploadProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UploadProfile(ctx, req.(*UploadProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UploadProfileCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadProfileCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UploadProfileCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.UserService/UploadProfileCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UploadProfileCache(ctx, req.(*UploadProfileCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_MysqlToCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MysqlToCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).MysqlToCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.UserService/MysqlToCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).MysqlToCache(ctx, req.(*MysqlToCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apis.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogIn",
			Handler:    _UserService_LogIn_Handler,
		},
		{
			MethodName: "LogInCache",
			Handler:    _UserService_LogInCache_Handler,
		},
		{
			MethodName: "ModifyNickName",
			Handler:    _UserService_ModifyNickName_Handler,
		},
		{
			MethodName: "ModifyNickNameCache",
			Handler:    _UserService_ModifyNickNameCache_Handler,
		},
		{
			MethodName: "UploadProfile",
			Handler:    _UserService_UploadProfile_Handler,
		},
		{
			MethodName: "UploadProfileCache",
			Handler:    _UserService_UploadProfileCache_Handler,
		},
		{
			MethodName: "MysqlToCache",
			Handler:    _UserService_MysqlToCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis.proto",
}
